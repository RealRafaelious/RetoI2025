#################################################################################
# 5. ¬øEl sexo del docente influye en el nivel de conexi√≥n de sus estudiantes? #
#################################################################################
import pandas as pd
from scipy.stats import ttest_ind
import matplotlib.pyplot as plt
import seaborn as sns

# Cargar archivo unido
df = pd.read_excel("TablasActuales/UNION.xlsx")

print("LIMITACI√ìN METODOL√ìGICA:")
print("Los 'dias_de_conexion_dispositivo' son globales por estudiante, no espec√≠ficos por docente/materia.")
print("Por tanto, no podemos establecer relaci√≥n causal directa entre sexo del docente y conexi√≥n.")
print("\nENFOQUE ALTERNATIVO: An√°lisis por grupos")
print("="*60)

# Crear identificador de grupo-centro
df['id_grupo'] = df['ciclo_docente'].astype(str) + '_' + df['id_centro_docente'].astype(str)

print("DEFINICI√ìN DE GRUPO:")
print("Grupo = ciclo_docente + id_centro_docente")
print("Ejemplo: '7_15' = ciclo 7 en centro 15")
print("Asumimos que estudiantes del mismo ciclo en el mismo centro forman un 'grupo'")
print(f"Total de grupos √∫nicos identificados: {df['id_grupo'].nunique()}")
print(f"Total de registros (estudiante-docente): {len(df)}")
print()

# Explorar la composici√≥n de sexo por grupo
print("AN√ÅLISIS DE COMPOSICI√ìN DE GRUPOS:")
print("="*50)

# Verificar cu√°ntos sexos diferentes hay por grupo
grupos_sexo = df.groupby('id_grupo')['sexo_docente'].nunique().reset_index()
grupos_sexo.columns = ['id_grupo', 'num_sexos_diferentes']

print("Distribuci√≥n de grupos por n√∫mero de sexos de docentes:")
print(grupos_sexo['num_sexos_diferentes'].value_counts().sort_index())

# Mostrar algunos ejemplos de grupos con m√∫ltiples sexos
grupos_mixtos = grupos_sexo[grupos_sexo['num_sexos_diferentes'] > 1]['id_grupo'].head(5)
if len(grupos_mixtos) > 0:
    print(f"\nEjemplos de grupos con docentes de ambos sexos:")
    for grupo in grupos_mixtos:
        sexos_en_grupo = df[df['id_grupo'] == grupo]['sexo_docente'].unique()
        print(f"Grupo {grupo}: {sexos_en_grupo}")

print("\nCRITERIO ACTUAL PROBLEM√ÅTICO:")
print("- Estamos tomando el sexo del docente de cualquier fila del grupo")
print("- Esto es arbitrario si hay docentes de ambos sexos en el grupo")
print("- No refleja verdadero 'liderazgo' del grupo")

# Mostrar criterios posibles
print("\nCRITERIOS ALTERNATIVOS POSIBLES:")
print("1. Tomar el sexo m√°s frecuente en el grupo")
print("2. Excluir grupos mixtos del an√°lisis")
print("3. Analizar solo grupos con un √∫nico sexo de docente")
print("4. Usar proporci√≥n de docentes por sexo como variable continua")

# Filtrar columnas necesarias y eliminar nulos
df_filtrado = df[["id_grupo", "sexo_docente", "dias_de_conexion_dispositivo"]].dropna()

# CRITERIO MEJORADO: Analizar composici√≥n de sexo por grupo
def obtener_sexo_predominante(serie):
    """Funci√≥n segura para obtener el sexo predominante o √∫nico en un grupo"""
    serie_limpia = serie.dropna()
    if len(serie_limpia) == 0:
        return None
    moda = serie_limpia.mode()
    return moda.iloc[0] if len(moda) > 0 else None

grupos_composicion = df_filtrado.groupby('id_grupo')['sexo_docente'].agg([
    'nunique', 
    obtener_sexo_predominante
]).reset_index()
grupos_composicion.columns = ['id_grupo', 'num_sexos', 'sexo_predominante']

# Eliminar grupos sin informaci√≥n de sexo
grupos_composicion = grupos_composicion.dropna(subset=['sexo_predominante'])

# Calcular promedio de conexi√≥n por grupo
grupos_conexion = df_filtrado.groupby('id_grupo').agg(
    promedio_conexion=('dias_de_conexion_dispositivo', 'mean'),
    num_estudiantes=('dias_de_conexion_dispositivo', 'count')
).reset_index()

# Combinar informaci√≥n
grupos_resumen = grupos_conexion.merge(grupos_composicion, on='id_grupo')

print(f"\nTOTAL DE GRUPOS: {len(grupos_resumen)}")
print(f"Grupos con un solo sexo de docente: {len(grupos_resumen[grupos_resumen['num_sexos'] == 1])}")
print(f"Grupos con ambos sexos: {len(grupos_resumen[grupos_resumen['num_sexos'] > 1])}")

# OPCI√ìN 1: Analizar solo grupos con un √∫nico sexo de docente
grupos_puros = grupos_resumen[grupos_resumen['num_sexos'] == 1].copy()
grupos_puros['sexo_docente'] = grupos_puros['sexo_predominante']

# Validar que tenemos grupos puros
if len(grupos_puros) == 0:
    print("\n‚ùå ERROR: No hay grupos con un √∫nico sexo de docente para analizar.")
    print("El an√°lisis no puede proceder.")
    exit()

# Validar que tenemos ambos sexos representados
grupos_f = grupos_puros[grupos_puros['sexo_docente'] == 'F']
grupos_m = grupos_puros[grupos_puros['sexo_docente'] == 'M']

if len(grupos_f) == 0 or len(grupos_m) == 0:
    print(f"\n‚ö†Ô∏è  ADVERTENCIA: Solo tenemos grupos de un sexo:")
    print(f"Grupos con docentes mujeres: {len(grupos_f)}")
    print(f"Grupos con docentes varones: {len(grupos_m)}")
    print("No es posible hacer comparaci√≥n estad√≠stica.")

print(f"\nAN√ÅLISIS CON GRUPOS 'PUROS' (un solo sexo):")
print(f"Grupos con solo docentes mujeres: {len(grupos_f)}")
print(f"Grupos con solo docentes varones: {len(grupos_m)}")

# Validar tama√±o m√≠nimo de grupos para an√°lisis estad√≠stico
if len(grupos_f) < 3 or len(grupos_m) < 3:
    print(f"\n‚ö†Ô∏è  ADVERTENCIA: Grupos muy peque√±os para an√°lisis estad√≠stico robusto")
    print(f"Se recomienda al menos 3 grupos por categor√≠a para t-test confiable")

# Separar grupos por sexo del docente (solo grupos puros)
grupos_mujeres = grupos_puros[grupos_puros["sexo_docente"] == "F"]["promedio_conexion"]
grupos_varones = grupos_puros[grupos_puros["sexo_docente"] == "M"]["promedio_conexion"]

print(f"N√∫mero de grupos con docente mujer: {len(grupos_mujeres)}")
print(f"N√∫mero de grupos con docente var√≥n: {len(grupos_varones)}")

# Calcular estad√≠sticas descriptivas
if len(grupos_mujeres) > 0 and len(grupos_varones) > 0:
    prom_grupos_mujeres = grupos_mujeres.mean()
    prom_grupos_varones = grupos_varones.mean()
    
    print(f"\nüìä ESTAD√çSTICAS DESCRIPTIVAS:")
    print(f"Grupos con docentes mujeres:")
    print(f"  - Promedio: {prom_grupos_mujeres:.2f} d√≠as")
    print(f"  - Desviaci√≥n est√°ndar: {grupos_mujeres.std():.2f}")
    print(f"  - Mediana: {grupos_mujeres.median():.2f}")
    
    print(f"Grupos con docentes varones:")
    print(f"  - Promedio: {prom_grupos_varones:.2f} d√≠as")
    print(f"  - Desviaci√≥n est√°ndar: {grupos_varones.std():.2f}")
    print(f"  - Mediana: {grupos_varones.median():.2f}")
    
    # Prueba estad√≠stica
    if len(grupos_mujeres) >= 3 and len(grupos_varones) >= 3:
        t_stat, p_value = ttest_ind(grupos_mujeres, grupos_varones)
        print(f"\nüßÆ PRUEBA ESTAD√çSTICA (t-test):")
        print(f"Estad√≠stico t: {t_stat:.4f}")
        print(f"p-valor: {p_value:.5f}")
        
        if p_value < 0.05:
            print("‚úÖ Hay diferencia estad√≠sticamente significativa entre grupos seg√∫n sexo del docente (Œ±=0.05).")
        else:
            print("‚ùå No hay diferencia estad√≠sticamente significativa entre grupos seg√∫n sexo del docente (Œ±=0.05).")
            
        # Calcular tama√±o del efecto
        diferencia = abs(prom_grupos_mujeres - prom_grupos_varones)
        pooled_std = ((grupos_mujeres.std()**2 + grupos_varones.std()**2) / 2)**0.5
        cohens_d = diferencia / pooled_std if pooled_std > 0 else 0
        print(f"Tama√±o del efecto (Cohen's d): {cohens_d:.3f}")
        
        if cohens_d < 0.2:
            print("  ‚Üí Efecto peque√±o/negligible")
        elif cohens_d < 0.5:
            print("  ‚Üí Efecto peque√±o")
        elif cohens_d < 0.8:
            print("  ‚Üí Efecto mediano")
        else:
            print("  ‚Üí Efecto grande")
    else:
        print(f"\n‚ö†Ô∏è  Muestra insuficiente para t-test confiable.")
        print(f"Grupos con mujeres: {len(grupos_mujeres)}, con varones: {len(grupos_varones)}")
        
else:
    print("‚ùå No hay datos suficientes para realizar an√°lisis estad√≠stico.")

print("\nIMPORTANTE: Este an√°lisis tiene limitaciones:")
print("- Los estudiantes pueden tener m√∫ltiples docentes")
print("- Los d√≠as de conexi√≥n son globales, no por materia espec√≠fica")
print("- La relaci√≥n podr√≠a estar confundida por otros factores")

# ---------------------------------
# Gr√°fico: promedio de conexi√≥n por grupo seg√∫n sexo docente (solo grupos puros)
# ---------------------------------
plt.figure(figsize=(10, 6))
sns.boxplot(data=grupos_puros, x="sexo_docente", y="promedio_conexion", palette="pastel")
plt.title("Promedio de conexi√≥n por grupo seg√∫n sexo del docente\n(Solo grupos con un √∫nico sexo de docente)")
plt.xlabel("Sexo del docente")
plt.ylabel("Promedio de d√≠as de conexi√≥n del grupo")
plt.xticks(ticks=[0, 1], labels=["Mujer", "Var√≥n"])
plt.grid(True, alpha=0.3)

# Agregar informaci√≥n sobre el n√∫mero de grupos
plt.text(0.02, 0.98, f'Grupos con solo docentes mujeres: {len(grupos_mujeres)}', 
         transform=plt.gca().transAxes, verticalalignment='top', fontsize=10)
plt.text(0.02, 0.92, f'Grupos con solo docentes varones: {len(grupos_varones)}', 
         transform=plt.gca().transAxes, verticalalignment='top', fontsize=10)
plt.text(0.02, 0.86, f'Grupos mixtos excluidos: {len(grupos_resumen) - len(grupos_puros)}', 
         transform=plt.gca().transAxes, verticalalignment='top', fontsize=10)

plt.tight_layout()
plt.show()

print("\nCONCLUSI√ìN:")
print("Este an√°lisis es exploratorio y tiene limitaciones importantes.")
print("Para una respuesta definitiva necesitar√≠amos:")
print("- Datos de conexi√≥n espec√≠ficos por materia")
print("- Control por variables confusoras (nivel socioecon√≥mico, centro, etc.)")
print("- Informaci√≥n sobre asignaci√≥n de estudiantes a docentes") 
